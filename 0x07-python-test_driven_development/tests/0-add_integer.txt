# 0-add_integer.txt

===========================
Using 0-add_integer.py
===========================

This module defines a function for integer addition ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` returns back the sum of its two arguments. 
That value is equivalent to using the "+" operator for numbers.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

::

    >>> add_integer(2, -3)
    -1

The function is compatible with floating-point numbers as well.

::

    >>> add_integer(2.0, 3.0)
    5

Keep in mind that casting floats to integers occurs before addition.

::

    >>> add_integer(2.9, 0.2)
    2

::

    >>> add_integer(-2.9, -0.2)
    -2

You can combine floating point values and non-floating point values.

::

    >>> add_integer(2.3, -3)
    -1

The second argument is optional and is set to 98 by default.

::

    >>> add_integer(2)
    100

Non-Numbers
===========

``add_integer()`` assumes that both parameters must be floating or integers.
A TypeError is raised if either parameter is neither an integer nor a float:
::

    >>> add_integer("hello", 3)
    Traceback (the most recent call):
    TypeError: an integer a must exist.
::

    >>> add_integer(2, "hello")
    Traceback (last call's most recent):
    TypeError: an integer b must exist.

::

    >>> add_integer(None)
    Traceback (last call's most recent):
    TypeError: an integer a must exist.

::

    >>> add_integer(2.3, None)
    Traceback (last call's most recent):
    TypeError: an integer b must exist.

A TypeError warning is only printed for the first parameter 
if both inputs are not integers or floats.

::

    >>> add_integer("hello", "there")
    Traceback (last call's most recent):
    TypeError: an integer a must exist.

If infinity is supplied, the function will not succeed.

::

    >>> add_integer(float('inf'))
    Traceback (last call's most recent):
    OverflowError: cannot translate a float infinity to an integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (last call's most recent):
    OverflowError: cannot translate a float infinity to an integer

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (last call's most recent)):
    ValueError: float NaN cannot be converted to an integer

::

    >>> add_integer(2, float('nan'))
    Traceback (last call's most recent)):
    ValueError: float NaN cannot be converted to an integer

