Guide on using 4-print_square.py
============================

This module defines a function that prints a square ``print_square(size)``.

Usage
=====

The ''#'' character is used to print squares. The square's height and breadth are represented by the parameter size.

::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(1)
    #

::

    >>> print_square(4)
    ####
    ####
    ####
    ####

::

    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

The function will print nothing if ``size`` is zero.

::

    >>> print_square(0)

Invalid Sizes
=============

The parameter ``size`` must be an integer failure to which a 
TypeError is raised.

::

    >>> print_square("not an int")
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(5.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(None)
    Traceback (most recent call last):
    TypeError: size must be an integer

ValueError is raised if ``size`` is less than zero.

::

    >>> print_square(-7)
    Traceback (most recent call last):
    ValueError: size must be >= 0

The type will be checked before value-checking.

::

    >>> print_square(-7.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

You have to provide at least one argument

::

    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() missing 1 required positional argument: 'size'

